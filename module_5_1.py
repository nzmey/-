print('\n')

'''Developer - не только разработчик.'''

class House:
    def __init__(self, name = 'House', number_of_floors = 1, liver = 'Den'):
        self.name = name
        self.number_of_floors = number_of_floors
        self.liver = 'Den'

    '''Если функция "go_to()" должна выполниться
    при объявлении объекта класса "House", то все её параметры должны быть прописаны
    в качестве аргументов в функции-конструкторе класса "__init__()" вместе с указателем "self" - 
    - сообщающему, что эта функция-конструктор принадлежит классу "House".
    А также вызваны - с этим указателем -  как атрибуты класса для их инициализации.
    Соответственно - с указателем "self" - должна быть вызвана и сама функция "go_to()".
    
    НО, ФУНКЦИЯ "go_to()" НЕ ВЫЗЫВАЕТСЯ ПРИ ОБЪЯВЛЕНИИ ОБЪЕКТА "House"!!!
    
    Поэтому - присутствие указателя "self" в качестве первого её аргумента -
    - необходимо лишь для утверждения, что данная функция принадлежит классу "House".
    Естественно - что все данные (то есть атрибуты), принадлежащие классу "House" - должны быть
    прописаны и вызваны с указателем "self".
    '''
    def go_to(self, new_floor=1):
        if 0 < new_floor < self.number_of_floors+1:
            for i in range(1, new_floor+1):
                print(f'Этаж № {i}')
            print('Мы приехали!!!\n')
        else:
            print("Такого этажа не существует!!!\n")


house = House()
print(f'Объявляется строительный экземпляр'
      f' класса "House" под названием "{house.name}",'
      f' с числом этажей = {house.number_of_floors}.')
print('Вызываем несуществующий лифт без этажа - по умолчанию:')
house.go_to()
floor = 24
print(f'Вызываем тот же лифт на {floor} этаж:')
house.go_to(floor)
print(f'Хозяин кооператива "{house.name}" - {house.liver} - '
      f'благодарит нас и вас за посещение!...\n')

print('\n')

house_by_river = House('Дом на набережной', 23)
print(f'Объявляется строительный экземпляр'
      f' класса "House" под названием "{house_by_river.name}",'
      f' с числом этажей = {house_by_river.number_of_floors}.')
floor = 12
print(f'Вызываем лифт на {floor} этаж:')
house_by_river.go_to(floor)
floor = 29
print(f'Вызываем лифт на {floor} этаж:')
house_by_river.go_to(floor)

print(f'Хозяин кооператива "{house_by_river.name}" - {house_by_river.liver} - '
      f'благодарит нас и вас за посещение!...\n')

'''PS. Вообще, не хило было бы в лекциях про классы, атрибуты и объекты - 
затронуть тему функций-методов класса, принимающих аргументы.
А также, чуть подробней поговорить о роли указателя "self"
в качестве аргумента этих функций вообще, и 
в функции-конструкторе класса "__init__()" - в частности.

Это ведь додуматься надо - признак принадлежности метода к классу
поместить в список его аргументов!!!...
Или я - действительно - сумасшедший, и совершенно ничего не понимаю в этой жизни...

Всё это - особенно желательно - в связи с тем, что - 
насколько я понимаю - синтаксис языка Python -
больше опирается на логику английского языка, 
чем на общую математическую логику.

ВЫ СОГЛАСНЫ СО МНОЙ?!
'''

